import { useMemo } from 'react';
import { VisionCameraProxy } from 'react-native-vision-camera';

/**
 * An instance of the resize plugin.
 *
 * All temporary memory buffers allocated by the resize plugin
 * will be deleted once this value goes out of scope.
 */

/**
 * Get a new instance of the resize plugin.
 *
 * All temporary memory buffers allocated by the resize plugin
 * will be deleted once the returned value goes out of scope.
 */
export function createResizePlugin() {
  const resizePlugin = VisionCameraProxy.initFrameProcessorPlugin('resize');
  if (resizePlugin == null) {
    throw new Error('Cannot find vision-camera-resize-plugin! Did you install the native dependency properly?');
  }
  return {
    resize: (frame, options) => {
      'worklet';

      // @ts-expect-error
      const arrayBuffer = resizePlugin.call(frame, options);
      switch (options.dataType) {
        case 'uint8':
          // @ts-expect-error
          return new Uint8Array(arrayBuffer);
        case 'float32':
          // @ts-expect-error
          return new Float32Array(arrayBuffer);
        default:
          throw new Error(`Invalid data type (${options.dataType})!`);
      }
    }
  };
}

/**
 * Use an instance of the resize plugin.
 *
 * All temporary memory buffers allocated by the resize plugin
 * will be deleted once the component that uses `useResizePlugin()` unmounts.
 */
export function useResizePlugin() {
  return useMemo(() => createResizePlugin(), []);
}
//# sourceMappingURL=index.js.map